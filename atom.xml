<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Mochushile.github.io</id>
    <title>Gridea</title>
    <updated>2021-02-22T02:01:22.017Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Mochushile.github.io"/>
    <link rel="self" href="https://Mochushile.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Mochushile.github.io/images/avatar.png</logo>
    <icon>https://Mochushile.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[HashMap（JDK1.8赏析）]]></title>
        <id>https://Mochushile.github.io/post/hashmapjdk18-shang-xi/</id>
        <link href="https://Mochushile.github.io/post/hashmapjdk18-shang-xi/">
        </link>
        <updated>2021-02-20T05:58:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1hashmap">1.HashMap</h2>
<h3 id="11-数据结构">1.1 数据结构</h3>
<p>数据结构：数组+链表+红黑树</p>
<p>Node结构：</p>
<pre><code class="language-java">Node(int hash, K key, V value, Node&lt;K,V&gt; next) {
            this.hash = hash;
            this.key = key;
            this.value = value;
            this.next = next;
        }
</code></pre>
<h3 id="12-源码解析">1.2 源码解析</h3>
<h4 id="121-赋值操作put">1.2.1 赋值操作put()</h4>
<pre><code class="language-java">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;
  			/*空表就初始化一个node数组，数组的真实初始化其实放在了这里，
  				构造方法现在只是会指定具体的容量和阈值
  			*/
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
  			/*
  			(n - 1) &amp; hash也就是hash值对数组长度的n-1取余
  			0010 1010(74)
  					&amp;
  			0000 1111(16-1)
  					=
  		  0000 1010(10)
  		  74 % 16 = 10  等价于 （64+10）% 16 = 10
  		  原理：高位大于数组长度的都是位与运算都是0（64代表的那一位是：1&amp;0 = 0），
  		  位于数组长度之前的位与1位与运算就是自己本身
  		  
  		  所以e.hash &amp; （n-1）=== e.hash % n 
  		  
  		  如果当前桶位为空，直接把Node放在该桶位
  			*/
        if ((p = tab[i = (n - 1) &amp; hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else {
            Node&lt;K,V&gt; e; K k;
          	/*
          	1.传入的key的hash值和p的hash一样
          	2.key相等或者key的equals方法相等
          	这说明传入键值对的key已经存在，e会指向当前Node,以便后续的覆盖赋值操作
            */
            if (p.hash == hash &amp;&amp;
                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
                e = p;
          	// 如果是红黑树节点，就进行红黑树添加节点操作
            else if (p instanceof TreeNode)
                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);
            else {
              	// 剩下一种可能就是这个桶位是一个链表
                for (int binCount = 0; ; ++binCount) {
                  	/*
                  	链表中不包含要插入的键值对节点时，则将该节点接在链表的最后
                  	！！！ JDK1.7中 新增的Node节点采用头插入，而JDK1.8中改成了尾插入 
                  	*/
                    if ((e = p.next) == null) {
                        p.next = newNode(hash, key, value, null);
                        // 如果链表长度达到阈值，则进化成红黑树
                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);
                        break;
                    }
                  	// 条件为 true，表示当前链表包含要插入的键值对，终止遍历
                    if (e.hash == hash &amp;&amp;
                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                        break;
                  	// p指向当前节点的下一个节点
                  	// e指向当前节点
                    p = e;
                }
            }
            // 判断要插入的键值对是否存在 HashMap 中
            if (e != null) { // existing mapping for key
                V oldValue = e.value;
              	// onlyIfAbsent 表示是否仅在 oldValue 为 null 的情况下,
                // 更新键值对的值
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;
              	//预留方法，没有实现
                afterNodeAccess(e);
              	// 返回旧的value
                return oldValue;
            }
        }
  			// 改变了HashMap的数据结构就会加一，记录被操作的记录次数用的
        ++modCount;
  			// size+1后，超过了现有的阈值就会进行扩容操作
        if (++size &gt; threshold)
            resize();
  			// 预留方法，没有实现
        afterNodeInsertion(evict);
        return null;
    }
</code></pre>
<p><strong>赋值操作总结</strong></p>
<p>1.空表就初始化一个node数组，数组的真实初始化其实放在了这里</p>
<p>2.如果定位到桶位为空，直接把new一个Node放在数组的该桶位即可</p>
<p>3.接下来就是数组的桶位不为空的情况</p>
<p>4.数组中的桶位不为空，而且传入键值对的key就在数组的该桶位，e会指向当前Node,以便后续的覆盖赋值操作</p>
<p>5.数组中的桶位不为空，数组的该桶位是红黑树节点，就进行红黑树添加节点操作</p>
<p>6.最后剩下一种可能，这个桶位是一个链表（1&lt;length&lt;8）：</p>
<p>当前链表包含要插入的键值对，终止遍历,更新键值对的新值，返回旧的value。</p>
<p>链表中不包含要插入的键值对节点时，则将该节点接在链表的最后（JDK1.7中 新增的Node节点采用头插入，而JDK1.8中改成了尾插入），如果链表长度达到阈值，则进化成红黑树</p>
<p><strong>对二次幂的数取余</strong></p>
<pre><code class="language-java">(n - 1) &amp; hash也就是hash值对数组长度的n取余
0010 1010(74)
  	&amp;
0000 1111(16-1)
  	=
0000 1010(10)
74 % 16 = 10  等价于 （64+10）% 16 = 10
原理：
  高位大于数组长度的位与运算都是0（64代表的那一位是：1&amp;0 = 0），
	位于数组长度之前的位与1位与运算就是自己本身

</code></pre>
<p>e.hash &amp; （n-1）=== e.hash % n</p>
<h4 id="122-扩容机制resize">1.2.2 扩容机制resize()</h4>
<pre><code class="language-java">final Node&lt;K,V&gt;[] resize() {
    Node&lt;K,V&gt;[] oldTab = table;
    int oldCap = (oldTab == null) ? 0 : oldTab.length;
    int oldThr = threshold;
    int newCap, newThr = 0;
    if (oldCap &gt; 0) {
        if (oldCap &gt;= MAXIMUM_CAPACITY) {
            threshold = Integer.MAX_VALUE;
            return oldTab;
        }
        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;
                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)
            newThr = oldThr &lt;&lt; 1; // double threshold
    }
    else if (oldThr &gt; 0) // initial capacity was placed in threshold
        newCap = oldThr;
    else {               // zero initial threshold signifies using defaults
        newCap = DEFAULT_INITIAL_CAPACITY;
        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
    }
    if (newThr == 0) {
        float ft = (float)newCap * loadFactor;
        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?
                  (int)ft : Integer.MAX_VALUE);
    }
    threshold = newThr;
    @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})
        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];
    table = newTab;
  	/** 就得数组不为空，需要双循环遍历把每个键值对放入新的数组结构中
  	
  	*/
    if (oldTab != null) {
        for (int j = 0; j &lt; oldCap; ++j) {
            Node&lt;K,V&gt; e;
            if ((e = oldTab[j]) != null) {
                oldTab[j] = null;
                if (e.next == null)
                    newTab[e.hash &amp; (newCap - 1)] = e;
                else if (e instanceof TreeNode)
                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);
                else { // preserve order
                    Node&lt;K,V&gt; loHead = null, loTail = null;
                    Node&lt;K,V&gt; hiHead = null, hiTail = null;
                    Node&lt;K,V&gt; next;
                  	// 遍历链表，并将链表节点按原顺序进行分组
                    do {
                        next = e.next;
                      	/*
                      	16 --&gt;32    
                      	0001 0000   0001 1111
                      	&amp;
                      	001000010   0010 0010
                      	newCap = 2 * OldCap
                      	扩容后其实应该是：e.hash &amp; (newCap-1)
                      	也就是在newCap-1 = oldCap-1+oldCap
                      	也也就是在说：e.hash &amp; (newCap-1)
                      	关键在于e.hash&amp;oldCap是否为零
                      	为0，就是桶位不变，不为零就是j+oldCap就可以了
                      	第一组就是e.hash&amp; oldCap == 0 相当于e.hashcode在
                      	
                      	*/
                        if ((e.hash &amp; oldCap) == 0) {
                            if (loTail == null)
                                loHead = e;
                            else
                                loTail.next = e;
                            loTail = e;
                        }
                        else {
                            if (hiTail == null)
                                hiHead = e;
                            else
                                hiTail.next = e;
                            hiTail = e;
                        }
                    } while ((e = next) != null);
                    if (loTail != null) {
                        loTail.next = null;
                        newTab[j] = loHead;
                    }
                    if (hiTail != null) {
                        hiTail.next = null;
                        newTab[j + oldCap] = hiHead;
                    }
                }
            }
        }
    }
    return newTab;
}
</code></pre>
<p><strong>扩容总结：</strong></p>
<p>扩容机制：原有数组不为空，需要双循环遍历把每个键值对放入新的数组结构中。</p>
<p>其中具体步骤如下：</p>
<p>1.拿到的桶位不为空，首先会把旧数组的当前桶位置为空；</p>
<p>2.然后判断如果当前桶位只有一个节点，直接使用（n-1）&amp; e.hash进行定位当前Node在新数组中的桶位</p>
<p>3.如果桶位是一个树状的节点，那就重新映射这颗树上的节点到新数组中的位置（会对原有的红黑树进行拆分）</p>
<p>4.如果这个桶位是一个链表，那就要遍历链表，并将链表节点按原顺序进行分组</p>
<p><strong>分组规则（两个分组使用了两个head和两个tail指针）</strong>：</p>
<p>​	a.oldCap&amp;e.hash == 0 那就是说此节点的hash值和新数组的长度位于运算和旧数组一样,在新数组中的桶位数值不变，还是和在原有数组中一样的桶位值</p>
<p>​	b.oldCap&amp;e.hash == 1那就是说此节点的hash值和新数组的长度位于运算多了一个旧数组的长度（oldCap+j）</p>
<p>最后只需要把两个头节点放入响应的桶位即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Mochushile.github.io/post/hello-gridea/</id>
        <link href="https://Mochushile.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>